#!/bin/bash
# Author：79哥

# 设置环境变量和语言
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
LANG=en_US.UTF-8

# 设置宝塔程序安装目录
setup_path="/www"
python_bin=$setup_path/server/panel/pyenv/bin/python
cpu_cpunt=$(cat /proc/cpuinfo|grep processor|wc -l)
 
if [ "$1" ];then
    IDC_CODE=$1
fi

# 获取系统信息：版本、内存大小
GetSysInfo(){
    if [ -s "/etc/redhat-release" ];then
        SYS_VERSION=$(cat /etc/redhat-release)
    elif [ -s "/etc/issue" ]; then
        SYS_VERSION=$(cat /etc/issue)
    fi
    SYS_INFO=$(uname -a)
    SYS_BIT=$(getconf LONG_BIT)
    MEM_TOTAL=$(free -m|grep Mem|awk '{print $2}')
    CPU_INFO=$(getconf _NPROCESSORS_ONLN)
 
    echo -e ${SYS_VERSION}
    echo -e Bit:${SYS_BIT} Mem:${MEM_TOTAL}M Core:${CPU_INFO}
    echo -e ${SYS_INFO}
    echo -e "请截图以上报错信息发帖至79论坛求助"
}
 
Red_Error(){
    echo '=================================================';
    printf '\033[1;31;40m%b\033[0m\n' "$1";
    GetSysInfo
    exit 1;
}
 
is64bit=$(getconf LONG_BIT)
if [ "${is64bit}" != '64' ];then
    Red_Error "抱歉, 当前面板版本不支持32位系统, 请使用64位系统或安装宝塔5.9!";
fi

# 锁定安装目录，添加扩展属性
Lock_Clear(){
    if [ -f "/etc/bt_crack.pl" ];then
        chattr -R -ia /www
        chattr -ia /etc/init.d/bt
        \cp -rpa /www/backup/panel/vhost/* /www/server/panel/vhost/
        mv /www/server/panel/BTPanel/__init__.bak /www/server/panel/BTPanel/__init__.py
        rm -f /etc/bt_crack.pl
    fi
}

# 检测安装环境
Install_Check(){
    while [ "$yes" != 'yes' ] && [ "$yes" != 'n' ]
    do
        echo -e "----------------------------------------------------"
        echo -e "已有Web环境，安装宝塔可能影响现有站点"
        echo -e "Web service is alreday installed,Can't install panel"
        echo -e "----------------------------------------------------"
        read -p "输入yes强制安装/Enter yes to force installation (yes/n): " yes;
    done
    if [ "$yes" == 'n' ];then
        exit;
    fi
}

# 检测nginx、httpd、mysqld服务
System_Check(){
    for serviceS in nginx httpd mysqld
    do
        if [ -f "/etc/init.d/${serviceS}" ]; then
            if [ "${serviceS}" = "httpd" ]; then
                serviceCheck=$(cat /etc/init.d/${serviceS}|grep /www/server/apache)
            elif [ "${serviceS}" = "mysqld" ]; then
                serviceCheck=$(cat /etc/init.d/${serviceS}|grep /www/server/mysql)
            else
                serviceCheck=$(cat /etc/init.d/${serviceS}|grep /www/server/${serviceS})
            fi
            [ -z "${serviceCheck}" ] && Install_Check
        fi
    done
}

# 检查RHEL或Dibian包管理工具
Get_Pack_Manager(){
    if [ -f "/usr/bin/yum" ] && [ -d "/etc/yum.repos.d" ]; then
        PM="yum"
    elif [ -f "/usr/bin/apt-get" ] && [ -f "/usr/bin/dpkg" ]; then
        PM="apt-get"       
    fi
}

# 检查系统交换空间大小，为安装目录设置1G交换空间
Auto_Swap()
{
    swap=$(free |grep Swap|awk '{print $2}')
    if [ "${swap}" -gt 1 ];then
        echo "Swap total sizse: $swap";
        return;
    fi
    if [ ! -d /www ];then
        mkdir /www
    fi
    swapFile="/www/swap"
    dd if=/dev/zero of=$swapFile bs=1M count=1025
    mkswap -f $swapFile
    swapon $swapFile
    echo "$swapFile    swap    swap    defaults    0 0" >> /etc/fstab
    swap=`free |grep Swap|awk '{print $2}'`
    if [ $swap -gt 1 ];then
        echo "Swap total sizse: $swap";
        return;
    fi
     
    sed -i "/\/www\/swap/d" /etc/fstab
    rm -f $swapFile
}

# 添加服务
Service_Add(){
    if [ "${PM}" == "yum" ] || [ "${PM}" == "dnf" ]; then
        chkconfig --add bt
        chkconfig --level 2345 bt on
    elif [ "${PM}" == "apt-get" ]; then
        update-rc.d bt defaults
    fi
}

# 添加BTSoft下载节点，并选择节点进行下载
get_node_url(){
    if [ ! -f /bin/curl ];then
        if [ "${PM}" = "yum" ]; then
            yum install curl -y
        elif [ "${PM}" = "apt-get" ]; then
            apt-get install curl -y
        fi
    fi
     
    echo '---------------------------------------------';
    echo "Selected download node...";
    nodes=(http://dg2.bt.cn http://dg1.bt.cn http://123.129.198.197 http://103.224.251.67 http://125.88.182.172:5880 http://45.76.53.20 http://119.188.210.21:5880 http://120.206.184.160 http://113.107.111.78 http://128.1.164.196);
    tmp_file1=/dev/shm/net_test1.pl
    tmp_file2=/dev/shm/net_test2.pl
    [ -f "${tmp_file1}" ] && rm -f ${tmp_file1}
    [ -f "${tmp_file2}" ] && rm -f ${tmp_file2}
    touch $tmp_file1
    touch $tmp_file2
    for node in ${nodes[@]};
    do
        NODE_CHECK=$(curl --connect-timeout 3 -m 3 2>/dev/null -w "%{http_code} %{time_total}" ${node}/net_test|xargs)
        RES=$(echo ${NODE_CHECK}|awk '{print $1}')
        NODE_STATUS=$(echo ${NODE_CHECK}|awk '{print $2}')
        TIME_TOTAL=$(echo ${NODE_CHECK}|awk '{print $3 * 1000 - 500 }'|cut -d '.' -f 1)
        if [ "${NODE_STATUS}" == "200" ];then
            if [ $TIME_TOTAL -lt 100 ];then
                if [ $RES -ge 1500 ];then
                    echo "$RES $node" >> $tmp_file1
                fi
            else
                if [ $RES -ge 1500 ];then
                    echo "$TIME_TOTAL $node" >> $tmp_file2
                fi
            fi
 
            i=$(($i+1))
            if [ $TIME_TOTAL -lt 100 ];then
                if [ $RES -ge 3000 ];then
                    break;
                fi
            fi 
        fi
    done
 
    NODE_URL=$(cat $tmp_file1|sort -r -g -t " " -k 1|head -n 1|awk '{print $2}')
    if [ -z "$NODE_URL" ];then
        NODE_URL=$(cat $tmp_file2|sort -g -t " " -k 1|head -n 1|awk '{print $2}')
        if [ -z "$NODE_URL" ];then
            NODE_URL='http://download.bt.cn';
        fi
    fi
    rm -f $tmp_file1
    rm -f $tmp_file2
    download_Url=$NODE_URL
    downloader_Url=http://bt.79mz.cn
    echo "Download node: $download_Url";
    echo '---------------------------------------------';
}

# 清空多余的安装包
Remove_Package(){
    local PackageNmae=$1
    if [ "${PM}" == "yum" ];then
        isPackage=$(rpm -q ${PackageNmae}|grep "not installed")
        if [ -z "${isPackage}" ];then
            yum remove ${PackageNmae} -y
        fi
    elif [ "${PM}" == "apt-get" ];then
        isPackage=$(dpkg -l|grep ${PackageNmae})
        if [ "${PackageNmae}" ];then
            apt-get remove ${PackageNmae} -y
        fi
    fi
}

# RHEL环境换源加速并进行时间同步
Install_RPM_Pack(){
    yumPath=/etc/yum.conf
    Centos8Check=$(cat /etc/redhat-release | grep ' 8.' | grep -iE 'centos|Red Hat')
    isExc=$(cat $yumPath|grep httpd)
    if [ "$isExc" = "" ];then
        echo "exclude=httpd nginx php mysql mairadb python-psutil python2-psutil" >> $yumPath
    fi
 
    yumBaseUrl=$(cat /etc/yum.repos.d/CentOS-Base.repo|grep baseurl=http|cut -d '=' -f 2|cut -d '$' -f 1|head -n 1)
    [ "${yumBaseUrl}" ] && checkYumRepo=$(curl --connect-timeout 5 --head -s -o /dev/null -w %{http_code} ${yumBaseUrl})   
    if [ "${checkYumRepo}" != "200" ];then
		#下载换源脚本
        curl -Ss --connect-timeout 3 -m 60 http://download.bt.cn/install/yumRepo_select.sh|bash
    fi
     
    #尝试同步时间(从bt.cn)
    echo 'Synchronizing system time...'
    getBtTime=$(curl -sS --connect-timeout 3 -m 60 http://bt.cn/api/index/get_time)
    if [ "${getBtTime}" ];then 
        date -s "$(date -d @$getBtTime +"%Y-%m-%d %H:%M:%S")"
    fi
 
    if [ -z "${Centos8Check}" ]; then
        yum install ntp -y
        rm -rf /etc/localtime
        ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
 
        #尝试同步国际时间(从ntp服务器)
        ntpdate 0.asia.pool.ntp.org
        setenforce 0
    fi
 
    startTime=`date +%s`
 
    sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config
    #yum remove -y python-requests python3-requests python-greenlet python3-greenlet
    yumPacks="libcurl-devel wget tar gcc make zip unzip openssl openssl-devel gcc libxml2 libxml2-devel libxslt* zlib zlib-devel libjpeg-devel libpng-devel libwebp libwebp-devel freetype freetype-devel lsof pcre pcre-devel vixie-cron crontabs icu libicu-devel c-ares libffi-devel bzip2-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel"
    yum install -y ${yumPacks}
 
    for yumPack in ${yumPacks}
    do
        rpmPack=$(rpm -q ${yumPack})
        packCheck=$(echo ${rpmPack}|grep not)
        if [ "${packCheck}" ]; then
            yum install ${yumPack} -y
        fi
    done
    if [ -f "/usr/bin/dnf" ]; then
        dnf install -y redhat-rpm-config
    fi
 
    yum install epel-release -y
}

# Debian环境安装需要的依赖包
Install_Deb_Pack(){
    ln -sf bash /bin/sh
    apt-get update -y
    apt-get install ruby -y
    apt-get install lsb-release -y
    for pace in wget curl libcurl4-openssl-dev gcc make zip unzip openssl libssl-dev gcc libxml2 libxml2-dev libxslt zlib1g zlib1g-dev libjpeg-dev libpng-dev lsof libpcre3 libpcre3-dev cron net-tools swig build-essential libffi-dev libbz2-dev libncurses-dev libsqlite3-dev libreadline-dev tk-dev libgdbm-dev libdb-dev libdb++-dev libpcap-dev xz-utils git;
    do apt-get -y install $pace --force-yes; done
 
    if [ ! -d '/etc/letsencrypt' ];then
        mkdir -p /etc/letsencryp
        mkdir -p /var/spool/cron
        if [ ! -f '/var/spool/cron/crontabs/root' ];then
            echo '' > /var/spool/cron/crontabs/root
            chmod 600 /var/spool/cron/crontabs/root
        fi 
    fi
}

# 安装BTSoft
Install_Bt(){
    panelPort="2279"
    if [ -f ${setup_path}/server/panel/data/port.pl ];then
        panelPort=$(cat ${setup_path}/server/panel/data/port.pl)
    fi
    mkdir -p ${setup_path}/server/panel/logs
    mkdir -p ${setup_path}/server/panel/vhost/apache
    mkdir -p ${setup_path}/server/panel/vhost/nginx
    mkdir -p ${setup_path}/server/panel/vhost/rewrite
    mkdir -p ${setup_path}/server/panel/install
    mkdir -p /www/server
    mkdir -p /www/wwwroot
    mkdir -p /www/wwwlogs
    mkdir -p /www/backup/database
    mkdir -p /www/backup/site
 
    if [ ! -f "/usr/bin/unzip" ]; then
        if [ "${PM}" = "yum" ]; then
            yum install unzip -y
        elif [ "${PM}" = "apt-get" ]; then
            apt-get install unzip -y
        fi
    fi
 
    if [ -f "/etc/init.d/bt" ]; then
        /etc/init.d/bt stop
        sleep 1
    fi
 
    wget -O panel.zip ${downloader_Url}/install/src/panel6.zip -T 10
    wget -O /etc/init.d/bt ${downloader_Url}/install/src/bt6.init -T 10
    chattr -i /www/server/panel/install/public.sh
    chattr -i /www/server/panel/install/check.sh
    wget -O /www/server/panel/install/public.sh ${downloader_Url}/install/public.sh -T 10
 
    if [ -f "${setup_path}/server/panel/data/default.db" ];then
        if [ -d "/${setup_path}/server/panel/old_data" ];then
            rm -rf ${setup_path}/server/panel/old_data
        fi
        mkdir -p ${setup_path}/server/panel/old_data
        mv -f ${setup_path}/server/panel/data/default.db ${setup_path}/server/panel/old_data/default.db
        mv -f ${setup_path}/server/panel/data/system.db ${setup_path}/server/panel/old_data/system.db
        mv -f ${setup_path}/server/panel/data/port.pl ${setup_path}/server/panel/old_data/port.pl
        mv -f ${setup_path}/server/panel/data/admin_path.pl ${setup_path}/server/panel/old_data/admin_path.pl
    fi
 
    unzip -o panel.zip -d ${setup_path}/server/ > /dev/null
 
    if [ -d "${setup_path}/server/panel/old_data" ];then
        mv -f ${setup_path}/server/panel/old_data/default.db ${setup_path}/server/panel/data/default.db
        mv -f ${setup_path}/server/panel/old_data/system.db ${setup_path}/server/panel/data/system.db
        mv -f ${setup_path}/server/panel/old_data/port.pl ${setup_path}/server/panel/data/port.pl
        mv -f ${setup_path}/server/panel/old_data/admin_path.pl ${setup_path}/server/panel/data/admin_path.pl
        if [ -d "/${setup_path}/server/panel/old_data" ];then
            rm -rf ${setup_path}/server/panel/old_data
        fi
    fi
 
    rm -f panel.zip
    chattr +i /www/server/panel/install/public.sh
    wget -O /www/server/panel/install/check.sh ${downloader_Url}/install/check.sh -T 10
    chattr +i /www/server/panel/install/check.sh
    wget -O /www/server/panel/data/plugin.json http://bt.79mz.cn/api_79.php
    #wget -O /www/server/panel/data/phplib.conf http://bt.79mz.cn/api_79.php
 
    if [ ! -f ${setup_path}/server/panel/tools.py ];then
        Red_Error "ERROR: Failed to download, please try install again!"
    fi
 
    rm -f ${setup_path}/server/panel/class/*.pyc
    rm -f ${setup_path}/server/panel/*.pyc
 
    chmod +x /etc/init.d/bt
    chmod -R 600 ${setup_path}/server/panel
    chmod -R +x ${setup_path}/server/panel/script
    ln -sf /etc/init.d/bt /usr/bin/bt
    echo "${panelPort}" > ${setup_path}/server/panel/data/port.pl
    wget -O /etc/init.d/bt ${downloader_Url}/install/src/bt7.init -T 10
    wget -O /www/server/panel/init.sh ${downloader_Url}/install/src/bt7.init -T 10
}

# 部署python环境
Install_Python_Lib(){
    curl -Ss --connect-timeout 3 -m 60 $download_Url/install/pip_select.sh|bash
    pyenv_path="/www/server/panel"
    if [ -f $pyenv_path/pyenv/bin/python ];then
        chmod -R 700 $pyenv_path/pyenv/bin
        is_package=$($python_bin -m psutil 2>&1|grep package)
        if [ "$is_package" = "" ];then
            wget -O $pyenv_path/pyenv/pip.txt $download_Url/install/pyenv/pip.txt -T 5
            $pyenv_path/pyenv/bin/pip install -U pip
            $pyenv_path/pyenv/bin/pip install -U setuptools
            $pyenv_path/pyenv/bin/pip install -r $pyenv_path/pyenv/pip.txt
        fi
        source $pyenv_path/pyenv/bin/activate
        return
    fi
    py_version="3.7.8"
    mkdir -p $pyenv_path
    os_type='el'
    os_version='7'
    is_export_openssl=0
    Get_Versions
    Centos6_Openssl
    Other_Openssl
    echo "OS: $os_type - $os_version"
    is_aarch64=$(uname -a|grep aarch64)
    if [ "$is_aarch64" != "" ];then
        os_version="aarch64"
    fi
    if [ "${os_version}" != "" ];then
        pyenv_file="/www/pyenv.tar.gz"
        wget -O $pyenv_file $download_Url/install/pyenv/pyenv-${os_type}${os_version}-x${is64bit}.tar.gz -T 10
        tmp_size=$(du -b $pyenv_file|awk '{print $1}')
        if [ $tmp_size -lt 703460 ];then
            rm -f $pyenv_file
            echo "ERROR: Download python env fielded."
        else
            echo "Install python env..."
            tar zxvf $pyenv_file -C $pyenv_path/ &> /dev/null
            chmod -R 700 $pyenv_path/pyenv/bin
            if [ ! -f $pyenv_path/pyenv/bin/python ];then
                rm -f $pyenv_file
                Red_Error "ERROR: Install python env fielded."
            fi
            rm -f $pyenv_file
            ln -sf $pyenv_path/pyenv/bin/pip3.7 /usr/bin/btpip
            ln -sf $pyenv_path/pyenv/bin/python3.7 /usr/bin/btpython
            source $pyenv_path/pyenv/bin/activate
            return
        fi
         
    fi
    if [ -f /usr/local/openssl/lib/libssl.so ];then
        export LDFLAGS="-L/usr/local/openssl/lib"
        export CPPFLAGS="-I/usr/local/openssl/include"
        export PKG_CONFIG_PATH="/usr/local/openssl/lib/pkgconfig"
        echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/openssl/lib" >> /etc/profile
        source /etc/profile
    fi
    cd /www
    python_src='/www/python_src.tar.xz'
    python_src_path="/www/Python-${py_version}"
    wget -O $python_src $download_Url/src/Python-${py_version}.tar.xz -T 5
    tmp_size=$(du -b $python_src|awk '{print $1}')
    if [ $tmp_size -lt 10703460 ];then
        rm -f $python_src
        Red_Error "ERROR: Download python source code fielded."
    fi
    tar xvf $python_src
    rm -f $python_src
    cd $python_src_path
    ./configure --prefix=$pyenv_path/pyenv
    make -j$cpu_cpunt
    make install
    if [ ! -f $pyenv_path/pyenv/bin/python3.7 ];then
        rm -rf $python_src_path
        Red_Error "ERROR: Make python env fielded."
    fi
    cd ~
    rm -rf $python_src_path
    wget -O $pyenv_path/pyenv/bin/activate $download_Url/install/pyenv/activate.panel -T 5
    wget -O $pyenv_path/pyenv/pip.txt $download_Url/install/pyenv/pip-3.7.8.txt -T 5
    ln -sf $pyenv_path/pyenv/bin/pip3.7 $pyenv_path/pyenv/bin/pip
    ln -sf $pyenv_path/pyenv/bin/python3.7 $pyenv_path/pyenv/bin/python
    ln -sf $pyenv_path/pyenv/bin/pip3.7 /usr/bin/btpip
    ln -sf $pyenv_path/pyenv/bin/python3.7 /usr/bin/btpython
    chmod -R 700 $pyenv_path/pyenv/bin
    $pyenv_path/pyenv/bin/pip install -U pip
    $pyenv_path/pyenv/bin/pip install -U setuptools
    $pyenv_path/pyenv/bin/pip install -U wheel==0.34.2
    $pyenv_path/pyenv/bin/pip install -r $pyenv_path/pyenv/pip.txt
    source $pyenv_path/pyenv/bin/activate
}

# 安装openssl
Other_Openssl(){
    openssl_version=$(openssl version|grep -Eo '[0-9]\.[0-9]\.[0-9]')
    if [ "$openssl_version" = '1.0.1' ] || [ "$openssl_version" = '1.0.0' ];then   
        opensslVersion="1.0.2r"
        if [ ! -f "/usr/local/openssl/lib/libssl.so" ];then
            cd /www
            openssl_src_file=/www/openssl.tar.gz
            wget -O $openssl_src_file ${download_Url}/src/openssl-${opensslVersion}.tar.gz
            tmp_size=$(du -b $openssl_src_file|awk '{print $1}')
            if [ $tmp_size -lt 703460 ];then
                rm -f $openssl_src_file
                Red_Error "ERROR: Download openssl-1.0.2 source code fielded."
            fi
            tar -zxf $openssl_src_file
            rm -f $openssl_src_file
            cd openssl-${opensslVersion}
            #zlib-dynamic shared
            ./config --openssldir=/usr/local/openssl zlib-dynamic shared
            make -j${cpuCore}
            make install
            echo  "/usr/local/openssl/lib" > /etc/ld.so.conf.d/zopenssl.conf
            ldconfig
            cd ..
            rm -rf openssl-${opensslVersion}
            is_export_openssl=1
            cd ~
        fi
    fi
}

# 安装Libressl
Insatll_Libressl(){
    openssl_version=$(openssl version|grep -Eo '[0-9]\.[0-9]\.[0-9]')
    if [ "$openssl_version" = '1.0.1' ] || [ "$openssl_version" = '1.0.0' ];then   
        opensslVersion="3.0.2"
        cd /www
        openssl_src_file=/www/openssl.tar.gz
        wget -O $openssl_src_file ${download_Url}/install/pyenv/libressl-${opensslVersion}.tar.gz
        tmp_size=$(du -b $openssl_src_file|awk '{print $1}')
        if [ $tmp_size -lt 703460 ];then
            rm -f $openssl_src_file
            Red_Error "ERROR: Download libressl-$opensslVersion source code fielded."
        fi
        tar -zxf $openssl_src_file
        rm -f $openssl_src_file
        cd libressl-${opensslVersion}
        ./config –prefix=/usr/local/lib
        make -j${cpuCore}
        make install
        ldconfig
        ldconfig -v
        cd ..
        rm -rf libressl-${opensslVersion}
        is_export_openssl=1
        cd ~
    fi
}

# Centos6系统安装openssl
Centos6_Openssl(){
    if [ "$os_type" != 'el' ];then
        return
    fi
    if [ "$os_version" != '6' ];then
        return
    fi
    echo 'Centos6 install openssl-1.0.2...'
    openssl_rpm_file="/www/openssl.rpm"
    wget -O $openssl_rpm_file $download_Url/rpm/centos6/${is64bit}/bt-openssl102.rpm -T 10
    tmp_size=$(du -b $openssl_rpm_file|awk '{print $1}')
    if [ $tmp_size -lt 102400 ];then
        rm -f $openssl_rpm_file
        Red_Error "ERROR: Download python env fielded."
    fi
    rpm -ivh $openssl_rpm_file
    rm -f $openssl_rpm_file
    is_export_openssl=1
}

# 获取系统版本
Get_Versions(){
    redhat_version_file="/etc/redhat-release"
    deb_version_file="/etc/issue"
    if [ -f $redhat_version_file ];then
        os_type='el'
        is_aliyunos=$(cat $redhat_version_file|grep Aliyun)
        if [ "$is_aliyunos" != "" ];then
            return
        fi
        os_version=$(cat $redhat_version_file|grep CentOS|grep -Eo '([0-9]+\.)+[0-9]+'|grep -Eo '^[0-9]')
        if [ "${os_version}" = "5" ];then
            os_version=""
        fi
    else
        os_type='ubuntu'
        os_version=$(cat $deb_version_file|grep Ubuntu|grep -Eo '([0-9]+\.)+[0-9]+'|grep -Eo '^[0-9]+')
        if [ "${os_version}" = "" ];then
            os_type='debian'
            os_version=$(cat $deb_version_file|grep Debian|grep -Eo '([0-9]+\.)+[0-9]+'|grep -Eo '[0-9]+')
            if [ "${os_version}" = "" ];then
                os_version=$(cat $deb_version_file|grep Debian|grep -Eo '[0-9]+')
            fi
            if [ "${os_version}" = "8" ];then
                os_version=""
            fi
            if [ "${is64bit}" = '32' ];then
                os_version=""
            fi
        else
            if [ "$os_version" = "14" ];then
                os_version=""
            fi
            if [ "$os_version" = "12" ];then
                os_version=""
            fi
            if [ "$os_version" = "19" ];then
                os_version=""
            fi
 
        fi
    fi
}

# BTSoft panel相关设置
Set_Bt_Panel(){
    password=$(cat /dev/urandom | head -n 16 | md5sum | head -c 8)
    sleep 1
    admin_auth="/www/server/panel/data/admin_path.pl"
    if [ ! -f ${admin_auth} ];then
        auth_path=$(cat /dev/urandom | head -n 16 | md5sum | head -c 8)
        echo "/${auth_path}" > ${admin_auth}
    fi
    auth_path=$(cat ${admin_auth})
    cd ${setup_path}/server/panel/
    /etc/init.d/bt start
    $python_bin -m py_compile tools.py
    $python_bin tools.py username
    username=$($python_bin tools.py panel ${password})
    cd ~
    echo "${password}" > ${setup_path}/server/panel/default.pl
    chmod 600 ${setup_path}/server/panel/default.pl
    sleep 3
    /etc/init.d/bt restart 
    sleep 3
    isStart=$(ps aux |grep 'BT-Panel'|grep -v grep|awk '{print $2}')
    LOCAL_CURL=$(curl 127.0.0.1:2279/login 2>&1 |grep -i html)
    if [ -z "${isStart}" ] && [ -z "${LOCAL_CURL}" ];then
        /etc/init.d/bt 22
        Red_Error "ERROR: The BT-Panel service startup failed."
    fi
}

# 系统防火墙相关设置
Set_Firewall(){
    sshPort=$(cat /etc/ssh/sshd_config | grep 'Port '|awk '{print $2}')
    if [ "${PM}" = "apt-get" ]; then
        apt-get install -y ufw
        if [ -f "/usr/sbin/ufw" ];then
            ufw allow 888,20,21,22,80,${panelPort},${sshPort}/tcp
            ufw allow 39000:40000/tcp
            ufw_status=`ufw status`
            echo y|ufw enable
            ufw default deny
            ufw reload
        fi
    else
        if [ -f "/etc/init.d/iptables" ];then
            iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 20 -j ACCEPT
            iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT
            iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
            iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT
            iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport ${panelPort} -j ACCEPT
            iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport ${sshPort} -j ACCEPT
            iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 39000:40000 -j ACCEPT
            #iptables -I INPUT -p tcp -m state --state NEW -m udp --dport 39000:40000 -j ACCEPT
            iptables -A INPUT -p icmp --icmp-type any -j ACCEPT
            iptables -A INPUT -s localhost -d localhost -j ACCEPT
            iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
            iptables -P INPUT DROP
            service iptables save
            sed -i "s#IPTABLES_MODULES=\"\"#IPTABLES_MODULES=\"ip_conntrack_netbios_ns ip_conntrack_ftp ip_nat_ftp\"#" /etc/sysconfig/iptables-config
            iptables_status=$(service iptables status | grep 'not running')
            if [ "${iptables_status}" == '' ];then
                service iptables restart
            fi
        else
            AliyunCheck=$(cat /etc/redhat-release|grep "Aliyun Linux")
            [ "${AliyunCheck}" ] && return
            yum install firewalld -y
            [ "${Centos8Check}" ] && yum reinstall python3-six -y
            systemctl enable firewalld
            systemctl start firewalld
            firewall-cmd --set-default-zone=public > /dev/null 2>&1
            firewall-cmd --permanent --zone=public --add-port=20/tcp > /dev/null 2>&1
            firewall-cmd --permanent --zone=public --add-port=21/tcp > /dev/null 2>&1
            firewall-cmd --permanent --zone=public --add-port=22/tcp > /dev/null 2>&1
            firewall-cmd --permanent --zone=public --add-port=80/tcp > /dev/null 2>&1
            firewall-cmd --permanent --zone=public --add-port=${panelPort}/tcp > /dev/null 2>&1
            firewall-cmd --permanent --zone=public --add-port=${sshPort}/tcp > /dev/null 2>&1
            firewall-cmd --permanent --zone=public --add-port=39000-40000/tcp > /dev/null 2>&1
            #firewall-cmd --permanent --zone=public --add-port=39000-40000/udp > /dev/null 2>&1
            firewall-cmd --reload
        fi
    fi
}

# 获取本机IP并设置宝塔公网IP
Get_Ip_Address(){
    getIpAddress=""
    getIpAddress=$(curl -sS --connect-timeout 10 -m 60 http://bt.79mz.cn/ip.php)
    if [ -z "${getIpAddress}" ] || [ "${getIpAddress}" = "0.0.0.0" ]; then
        isHosts=$(cat /etc/hosts|grep 'www.bt.cn')
        if [ -z "${isHosts}" ];then
            echo "" >> /etc/hosts
            echo "103.224.251.67 www.bt.cn" >> /etc/hosts
            getIpAddress=$(curl -sS --connect-timeout 10 -m 60 http://bt.79mz.cn/ip.php)
            if [ -z "${getIpAddress}" ];then
                sed -i "/bt.cn/d" /etc/hosts
            fi
        fi
    fi
 
    ipv4Check=$($python_bin -c "import re; print(re.match('^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$','${getIpAddress}'))")
    if [ "${ipv4Check}" == "None" ];then
        ipv6Address=$(echo ${getIpAddress}|tr -d "[]")
        ipv6Check=$($python_bin -c "import re; print(re.match('^([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}$','${ipv6Address}'))")
        if [ "${ipv6Check}" == "None" ]; then
            getIpAddress="SERVER_IP"
        else
            echo "True" > ${setup_path}/server/panel/data/ipv6.pl
            sleep 1
            /etc/init.d/bt restart
        fi
    fi
 
    if [ "${getIpAddress}" != "SERVER_IP" ];then
        echo "${getIpAddress}" > ${setup_path}/server/panel/data/iplist.txt
    fi
    LOCAL_IP=$(ip addr | grep -E -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -E -v "^127\.|^255\.|^0\." | head -n 1)
}
Setup_Count(){
    curl -sS --connect-timeout 10 -m 60 https://bt.cn/Api/SetupCount?type=Linux\&o=$1 > /dev/null 2>&1
    if [ "$1" != "" ];then
        echo $1 > /www/server/panel/data/o.pl
        cd /www/server/panel
        $python_bin tools.py o
    fi
    echo /www > /var/bt_setupPath.conf
}

# 安装全局函数
Install_Main(){
    startTime=`date +%s`
    Lock_Clear
    System_Check
    Get_Pack_Manager
    get_node_url
 
    MEM_TOTAL=$(free -g|grep Mem|awk '{print $2}')
    if [ "${MEM_TOTAL}" -le "1" ];then
        Auto_Swap
    fi
     
    if [ "${PM}" = "yum" ]; then
        Install_RPM_Pack
    elif [ "${PM}" = "apt-get" ]; then
        Install_Deb_Pack
    fi
 
    Install_Python_Lib
    Install_Bt
    sed -i 's/[0-9\.]\+[ ]\+www.bt.cn//g' /etc/hosts
    echo "127.0.0.1 www.bt.cn" >> /etc/hosts
    sed -i 's/[0-9\.]\+[ ]\+www.bt.cn/127.0.0.1 www.bt.cn/g' /etc/hosts
     
 
    Set_Bt_Panel
    Service_Add
    Set_Firewall
 
    Get_Ip_Address
    Setup_Count ${IDC_CODE}
}
 
Install_Mains(){
    startTime=`date +%s`
    Lock_Clear
    System_Check
    Get_Pack_Manager
    get_node_url
 
    MEM_TOTAL=$(free -g|grep Mem|awk '{print $2}')
    if [ "${MEM_TOTAL}" -le "1" ];then
        Auto_Swap
    fi
     
    if [ "${PM}" = "yum" ]; then
        Install_RPM_Pack
    elif [ "${PM}" = "apt-get" ]; then
        Install_Deb_Pack
    fi
 
    Install_Python_Lib
    Install_Bt
    sed -i 's/[0-9\.]\+[ ]\+www.bt.cn//g' /etc/hosts
    echo "127.0.0.1 www.bt.cn" >> /etc/hosts
    sed -i 's/[0-9\.]\+[ ]\+www.bt.cn/127.0.0.1 www.bt.cn/g' /etc/hosts
    cd /www/server/panel/plugin
    rm -rf /www/server/panel/plugin/shoki_cdn
    wget -O shoki_cdn.zip ${downloader_Url}/install/plugin/shoki_cdn.zip -T 10
    unzip shoki_cdn.zip
    rm -rf shoki_cdn.zip
     
 
    Set_Bt_Panel
    Service_Add
    Set_Firewall
 
    Get_Ip_Address
    Setup_Count ${IDC_CODE}
}
 
echo "
+----------------------------------------------------------------------
| Bt-WebPanel FOR CentOS/Ubuntu/Debian
+----------------------------------------------------------------------
| Copyright © 2015-2099 BT-SOFT(http://bt.79mz.cn) All rights reserved.
+----------------------------------------------------------------------
| The WebPanel URL will be http://SERVER_IP:2279 when installed.
+----------------------------------------------------------------------
"
while [ "$go" != 'y' ] && [ "$go" != 'n' ]
do
    read -p "请输入 y加速节点n默认节点(y/n): " go;
done
 
if [ "$go" == 'n' ];then
    Install_Main
fi
if [ "$go" == 'y' ];then
    Install_Mains
fi
 
echo -e "=================================================================="
echo -e "\033[32mCongratulations! Installed successfully!\033[0m"
echo -e "=================================================================="
echo  "外网面板地址: http://${getIpAddress}:${panelPort}${auth_path}"
echo  "内网面板地址: http://${LOCAL_IP}:${panelPort}${auth_path}"
echo -e "username: $username"
echo -e "password: $password"
echo -e "\033[33mIf you cannot access the panel,\033[0m"
echo -e "\033[33mrelease the following panel port [${panelPort}] in the security group\033[0m"
echo -e "\033[33m若无法访问面板，请检查防火墙/安全组是否有放行面板[${panelPort}]端口\033[0m"
echo -e "=================================================================="
 
endTime=`date +%s`
((outTime=($endTime-$startTime)/60))
echo -e "Time consumed:\033[32m $outTime \033[0mMinute!"
echo -e "\033[31m该界面说明脚本已经执行完毕，欢迎使用！ \033[0m" 
rm -rf install.sh
rm -rf install_6.0.sh